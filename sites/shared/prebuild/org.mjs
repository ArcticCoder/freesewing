import fs_ from 'fs'
import path from 'path'
import designs from '../../../config/software/designs.json' assert { type: 'json' }
import { capitalize } from '../../../sites/shared/utils.mjs'

const fs = fs_.promises

const header = `/*
 *
 * This page was auto-generated by the prebuild script
 * Any changes you make to it will be lost on the next (pre)build.
 *
 * If you want to make changes, update the pageTemplate in:
 *
 *   sites/shared/prebuild/org.mjs
 *
 */`

const newPatternTemplate = (design) => `${header}
// Dependencies
import { useTranslation } from 'next-i18next'
import { ${capitalize(design)} } from 'designs/${design}/src/index.mjs'
// Components
import { PageWrapper, ns as pageNs } from 'shared/components/wrappers/page.mjs'
import { ns as authNs } from 'shared/components/wrappers/auth/index.mjs'

// Translation namespaces used on this page
const namespaces = [...new Set([...setsNs, ...authNs, ...pageNs])]

const New${capitalize(design)} = ({ page }) => (
  <PageWrapper {...page}>
    <SetPicker design={capitalize />
  </PageWrapper>
)

export default NewSetPage

export async function getStaticProps({ locale }) {
  return {
    props: {
      ...(await serverSideTranslations(locale, namespaces)),
      page: {
        locale,
        path: ['new', 'pattern'],
      },
    },
  }
}
const NewPatternPage = ({ design }) => (
)


import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import { WorkbenchPage } from 'site/page-templates/workbench.mjs'

const Page = (props) => <WorkbenchPage {...props} design={${capitalize(design)}} version="next"/>
export default Page

export async function getStaticProps({ locale }) {
  return {
    props: {
      ...(await serverSideTranslations(locale)),
    }
  }
}
`

/*
 * Main method that does what needs doing
 */

export const prebuildOrg = async () => {
  const promises = []
  for (const design in designs) {
    // Generate new/pattern/design pages
    const page = newPatternTemplate(design)
    const folder = ['..', 'org', 'pages', 'new', 'pattern', design]
    await fs.mkdir(path.resolve(...folder), { recursive: true })
    promises.push(fs.writeFile(path.resolve(...folder, `index.mjs`), page))
  }
}

prebuildOrg()
